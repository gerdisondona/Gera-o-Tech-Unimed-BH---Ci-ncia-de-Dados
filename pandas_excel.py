# -*- coding: utf-8 -*-
"""Pandas_excel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UsIsAs2Fs5_qaPdO-LWmn9YcDciry50Q

Trabalhando com planilhas do excel
"""

#importando a biblioteca
import pandas as pd

#leitura dos arquivos
df1 = pd.read_excel("/content/drive/My Drive/Colab/datasets/Aracaju.xlsx")
df2 = pd.read_excel("/content/drive/My Drive/Colab/datasets/Fortaleza.xlsx")
df3 = pd.read_excel("/content/drive/My Drive/Colab/datasets/Natal.xlsx")
df4 = pd.read_excel("/content/drive/My Drive/Colab/datasets/Recife.xlsx")
df5 = pd.read_excel("/content/drive/My Drive/Colab/datasets/Salvador.xlsx")

#juntando todos os arquivo
df = pd.concat([df1, df2, df3, df4, df5])

#exibindo as 5 primeiras linhas
df.head()

#exibindo as 5 ultimas linhas
df.tail()

#Verificando o tipo de dado de cada coluna
df.dtypes

#alterando o tipo de dado da coluna LojaID
df["LojaID"] = df["LojaID"].astype("object")

df.dtypes

df.head()

df.head()

"""Tratando valores faltantes"""

#Consultando linhas com valores faltantes
df.isnull().sum()

#Substituindo os valores nulos pela média
df["Vendas"].fillna(df["Vendas"].mean(), inplace=True)

df.isnull().sum()

#Substituindo os valores nulos por zero
df["Vendas"].fillna(0, inplace=True)

#Apagadno as linhas com valores nulos
df.dropna(inplace=True)

df.sample(15)

#Removendo linhas que estejam com valores faltantes em todas as colunas
df.dropna(how="all", inplace=True)

df

df.shape

"""Criando colunas novas"""

#Criando a coluna de receita
df["Receita"] = df["Vendas"].mul(df["Qtde"])

df.head()

df["Receita/Vendas"] = df["Receita"] / df["Vendas"]

df.head()

#Retornando a menor receita
df["Receita"].min()

#Retornadno a maior receita
df["Receita"].max()

#nlargest maiores receita
df.nlargest(3,"Receita")

#nsamllest menores receita
df.nsmallest(3,"Receita")

#Agrupamento por cidade
df.groupby("Cidade")["Receita"].sum()

# Ordenando o conjunto de dados
df.sort_values("Receita", ascending=False).head(10)

"""Tratalhando com datas"""

#Transforando a coluna de data em tipo inteiro
df["Data"] = df["Data"].astype("int64")

#Verificando o tipo de dado de cada coluna
df.dtypes

# Transformando coluna de data em data
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#Agrupamento por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna com o ano
df["Ano_Venda"] = df["Data"].dt.year

df.sample(5)

#Extraindo o mês e o dia
df["mes_venda"], df["dia_venda"] = (df["Data"].dt.month, df["Data"].dt.day)

#Retornando a data mais amtiga
df["Data"].min()

#Calculando a diferença de dias
df["diferenca_dias"] = df["Data"] - df["Data"].min()

df.sample(5)

#Criando a coluna de trimestre
df["trimestre_venda"] = df["Data"].dt.quarter

df.sample(5)

#Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19

"""Visualização de dados"""

df["LojaID"].value_counts(ascending=False)

#Grafico de barras
df["LojaID"].value_counts(ascending=False).plot.bar()

#Gráfico de barras horizontais
df["LojaID"].value_counts().plot.barh()

#Grafico de barras horizontais
df["LojaID"].value_counts(ascending=False).plot.barh();

#Grafico de pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie()

#Total vendas por cidade
df["Cidade"].value_counts()

#Adicionando um titulo e alterando o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title="Total vendas por cidade")
plt.xlabel("Cidade")
plt.ylabel("Total vendas")

#Alterando a cor
df["Cidade"].value_counts().plot.bar(title="Total vendas por cidade", color="red")
plt.xlabel("Cidade")
plt.ylabel("Total vendas")

#Alteradno o estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title = "Total Produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos vendidos")
plt.legend()

df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionando apenas as vendas de 2019
df_2019 = df[df["Ano_Venda"] == 2019]

#Total produtos vendidos por mês
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend()

#Histograma
plt.hist(df["Qtde"], color="magenta")

plt.scatter(x = df_2019["dia_venda"], y = df_2019["Receita"])

#Salvando em png
df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.title("Quantidade de produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend()
plt.savefig("grafico QTDE x MES.png")

